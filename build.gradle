plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

project.gradle.ext.getProperties().each { prop ->
    //if (prop.key != null && prop.value != null)
    rootProject.ext.set(prop.key, prop.value)
}


architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = project.maven_group
    version = project.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    processResources {
        def replaceProperties = [
                version : project.mod_version,
                minecraft_version : project.minecraft_version,
                fabric_loader_version : project.fabric_loader_version,
                neoforge_loader_version : project.neoforge_version,
                architectury_api_version : project.architectury_api_version,
                yacl_version : project.yacl_version,
                java : project.java_version,
                name : "Ipla",
                modid : archives_name,
                description : "Mod that lets you place items on any block side",
                authors : "akicater",
                license : "MIT",
                sources : "https://github.com/"
        ]

        if (rootProject.hasProperty("forge_version")) {
            replaceProperties.put("forge_loader_version", project.forge_version)
        }
        if (rootProject.hasProperty("neoforge_version")) {
            replaceProperties.put("neoforge_loader_version", project.neoforge_version)
        }

        def files = ["fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml", "quilt.mod.json"]
        inputs.properties replaceProperties

        filesMatching(files) {
            replaceProperties.eachWithIndex {
                expand(replaceProperties) {
                    replaceProperties
                }
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.20.2:2023.10.08@zip")
        }
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {
        }
    }
}
